// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProtoServiceClient is the client API for ProtoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProtoServiceClient interface {
	JoinService(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Response, error)
	GetValue(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Value, error)
	SetValue(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error)
}

type protoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProtoServiceClient(cc grpc.ClientConnInterface) ProtoServiceClient {
	return &protoServiceClient{cc}
}

func (c *protoServiceClient) JoinService(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Proto.ProtoService/JoinService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) GetValue(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/Proto.ProtoService/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *protoServiceClient) SetValue(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Proto.ProtoService/SetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtoServiceServer is the server API for ProtoService service.
// All implementations must embed UnimplementedProtoServiceServer
// for forward compatibility
type ProtoServiceServer interface {
	JoinService(context.Context, *JoinRequest) (*Response, error)
	GetValue(context.Context, *GetRequest) (*Value, error)
	SetValue(context.Context, *SetRequest) (*Response, error)
	mustEmbedUnimplementedProtoServiceServer()
}

// UnimplementedProtoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProtoServiceServer struct {
}

func (UnimplementedProtoServiceServer) JoinService(context.Context, *JoinRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinService not implemented")
}
func (UnimplementedProtoServiceServer) GetValue(context.Context, *GetRequest) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedProtoServiceServer) SetValue(context.Context, *SetRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedProtoServiceServer) mustEmbedUnimplementedProtoServiceServer() {}

// UnsafeProtoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProtoServiceServer will
// result in compilation errors.
type UnsafeProtoServiceServer interface {
	mustEmbedUnimplementedProtoServiceServer()
}

func RegisterProtoServiceServer(s grpc.ServiceRegistrar, srv ProtoServiceServer) {
	s.RegisterService(&ProtoService_ServiceDesc, srv)
}

func _ProtoService_JoinService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).JoinService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto.ProtoService/JoinService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).JoinService(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto.ProtoService/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).GetValue(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProtoService_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtoServiceServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Proto.ProtoService/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtoServiceServer).SetValue(ctx, req.(*SetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProtoService_ServiceDesc is the grpc.ServiceDesc for ProtoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProtoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Proto.ProtoService",
	HandlerType: (*ProtoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinService",
			Handler:    _ProtoService_JoinService_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _ProtoService_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _ProtoService_SetValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/renameService.proto",
}
